// _Binary_Tree.h: interface for the _Binary_Tree class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX__BINARY_TREE_H__9381B15F_E185_4489_9415_360A22C0A4E2__INCLUDED_)
#define AFX__BINARY_TREE_H__9381B15F_E185_4489_9415_360A22C0A4E2__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "charLinkedQueue.h"

//刚开始尝试写英文注释的，后面知难而退了；不过原来的英文注释我保留了

class _Binary_Tree  
{
public:
	_Binary_Tree();//不带参数的构造函数
	_Binary_Tree( elementType *Arr );//带参数的构造函数
	void build( elementType *Arr );//从数组建立二叉树，相当于初始化；不带参数的构造函数无法适用于这里
	void createNode( binTree BT, elementType *Arr, int number );//根据从数组读到的数据先序递归建树
	virtual ~_Binary_Tree();//析构函数
	bool createBinaryTree( binTree &BT, elementType stringLine[100][3], int length, int &row );//根据文本数据
															//先序构造二叉树
	bool readFileToArray( elementType stringLine[100][3], int &length );//将文本数据读入二维数组中
	bool emptyBinaryTree();//二叉树判空，仅适用于带参数构造函数建立的二叉树
	bool _exit( binTree BT, elementType value );//判断节点数据是否在二叉树中
	binTree getNodePoint();//返回根节点地址
	binTree getNodePoint( binTree BT, elementType value );//返回value在二叉树中的地址
	binTree getParent( binTree BT, elementType value );//返回value的父母
	void preOrderTraverse(binTree BT);//前序遍历
	void inOrderTraverse(binTree BT);//中序遍历
	void postOrderTraverse(binTree BT);//后序遍历
	void levelOrderTraverse(binTree BT);//层次遍历
	void destroy( binTree BT );//销毁二叉树
	void level( binTree BT, int number );//求二叉树中各个节点的层次
	int height( binTree BT );//求二叉树高度
	int numberOfBTreeNode( binTree BT );//返回二叉树节点总数
	int numberOfBTreeLeafNode( binTree BT, int &number );//返回二叉树叶节点个数
	void numberOfNodeDegreeTwo( binTree BT, int &number );//求二叉树中度为2的节点个数
	//void family( binTree BT, elementType1 number );
	void getParent( binTree BT, elementType value, bool &flag );//求value的父节点
	void getSibling( binTree BT, elementType value, bool &flag );//when call the function, the parameter flag
																//must be assigned for false
																//求value的兄弟节点，法1；有一个bug
	void getSibling( binTree BT, elementType value );//求value的兄弟节点，法2
	void getChild( binTree BT, elementType value, bool &flag );//求value孩子节点
	int levelJudge( binTree BT, elementType value, int &number, int level );//返回value节点的层次
	void exchangeLeftAndRightSibling( binTree BT );//交换左右子树
	void copyBTree( binTree BT1, binTree BT );//复制二叉树
	charLinkedQueue clq;//包含
	void allLeafToRootPath( binTree BT, elementType *path, int &pathLength );//求所有叶节点到根节点路径
	void binaryTreeLongestPath( binTree BT, elementType *path, int &pathLength, 
		elementType *longestPath, int &longestLength );//求叶节点到根节点的最长路径
	binTree nearestAncestor( binTree BT, bitNode *BNode1, bitNode *BNode2 );//求两个节点的最近祖先
																			//本来打算用elementType数据
																			//作为参数的，后面发现行不通
																			//可能是我太菜了吧
private:
	bitNode *BTree;

};

#endif // !defined(AFX__BINARY_TREE_H__9381B15F_E185_4489_9415_360A22C0A4E2__INCLUDED_)
